<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web browser on Coding Harder</title>
    <link>https://nr072.github.io/blog/tags/web-browser/</link>
    <description>Recent content in web browser on Coding Harder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Jun 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://nr072.github.io/blog/tags/web-browser/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Firefox&#39;s Proton design: Pardon my French but the tabs look fat</title>
      <link>https://nr072.github.io/blog/posts/misc/pardon-my-french-tabs-look-fat/</link>
      <pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nr072.github.io/blog/posts/misc/pardon-my-french-tabs-look-fat/</guid>
      <description>&lt;p&gt;Firefox 89 is out and it&amp;rsquo;s gone through &lt;a href=&#34;https://blog.mozilla.org/en/products/firefox/fresh-new-look-for-firefox/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;a makeover&lt;/a&gt;
. The tabs look different, the menu &lt;em&gt;is&lt;/em&gt; different. Lots of design changes. I don&amp;rsquo;t like how tabs look now.&lt;/p&gt;
&lt;p&gt;The tabs were &amp;ldquo;detached from the browser&amp;rdquo; so that they&amp;rsquo;re easier to move, pull out and stuff? Doesn&amp;rsquo;t sound like a very strong reason. We&amp;rsquo;d been able to take tabs out in the past just as easily. Maybe this will have more effect (or any at all) on new Firefox users, because old users would just tear the necessary tabs out of the current window regardless of how willing or apathetic the tabs look.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;image-container&#34;&gt;&lt;span class=&#34;link&#34;&gt;&lt;img class=&#34;img&#34; src=&#34;images/tabs.jpg&#34;
        alt=&#34;Multiple tabs in the left image, and a single tab in the right image&#34;/&gt;&lt;/span&gt;&lt;span class=&#34;caption&#34;&gt;&lt;span class=&#34;title&#34;&gt;The new tabs are chubbier (images from the Mozilla Blog)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;And the second line indicating a video auto-play feels a weak reason just to increase the height. Wouldn&amp;rsquo;t it be simpler with just an icon on the same line?&lt;/p&gt;
&lt;p&gt;At least the address bar highlight effect is gone. (When the address bar was highlighted, it would grow bigger, touching (overstepping even) borders of everything around.) I disliked it instantly when it got into the Developer Edition. At least now the bar stays the same size.&lt;/p&gt;
&lt;p&gt;Speaking of the Developer Edition, the context menu has a white border around it in the Dark theme and the Alpenglow theme in the DE now. Why? I seem to recall I&amp;rsquo;ve been able to differentiate the context menu from the colors below quite well in the past. There was a distinct drop-shadow. There still is. (Although the base color of the Dark theme has changed, there seems to be a shadow in it too.) The white border somehow makes it look like high-contrast mode. It doesn&amp;rsquo;t go well with the themes.&lt;/p&gt;
&lt;p&gt;This change may seem irrelevant in this post, but what bodes ill for Firefox blue bodes ill for Firefox orange as well.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t get me wrong. There&amp;rsquo;s a ton of good changes as well. The merging of notifications will be appreciated by a lot of people, I think. The new clutter-free design should be very popular. (Though I wouldn&amp;rsquo;t know. I already have it customized.) The new icon for showing active downloads is cool.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;image-container&#34;&gt;&lt;span class=&#34;link&#34;&gt;&lt;img class=&#34;img&#34; src=&#34;images/notification.jpg&#34;
        alt=&#34;Two notification pop-ups before, and a single merged one after&#34;/&gt;&lt;/span&gt;&lt;span class=&#34;caption&#34;&gt;&lt;span class=&#34;title&#34;&gt;This is good, but too much bold text (image from the Mozilla Blog)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;And a lot of research has gone to back up the new changes too. They&amp;rsquo;ve looked at which parts of the browser users interact with most and then planned the new design design accordingly. So, the changes merely reflect our actions, what we prefer and what we don&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://blog.mozilla.org/wp-content/blogs.dir/278/files/2021/05/fx_firefox_heat-map-browser-1000x625.png&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;span class=&#34;image-container&#34;&gt;&lt;span class=&#34;link&#34;&gt;&lt;img class=&#34;img&#34; src=&#34;images/user-interaction.jpg&#34;
        alt=&#34;Amount of user interaction with the browser UI represented with colors&#34;/&gt;&lt;/span&gt;&lt;span class=&#34;caption&#34;&gt;&lt;span class=&#34;title&#34;&gt;Poor search bar! Don&#39;t be sad, I use you! (image from the Mozilla Blog)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;I love Firefox. I&amp;rsquo;ve been using it for so long. But the new tab style looks atrocious. Of course, it may be just because it&amp;rsquo;s something new, just because I&amp;rsquo;m too accustomed to the old look. It&amp;rsquo;ll probably pass quickly and I won&amp;rsquo;t even remember the old one after a few months.&lt;/p&gt;
&lt;p&gt;And, ultimately, my opinion doesn&amp;rsquo;t matter much, because I&amp;rsquo;m not a good example of a browser&amp;rsquo;s target audience. I didn&amp;rsquo;t even notice the change in permission-asking pop-ups! Even after using Google Meet a few times.&lt;/p&gt;
&lt;p&gt;Lots of people use Mozilla Firefox, and they have different preferences. It&amp;rsquo;s important to tend to most of their needs and provide others with ways to customize things their way. This browser has done a pretty good job over the years, I think. Some may not agree with some decisions, but what matters is whether there&amp;rsquo;s a positive effect on browsing experience after the initial denial wears off.&lt;/p&gt;
&lt;p&gt;So, I&amp;rsquo;ll still love you, Firefox, even if you&amp;rsquo;re ugly.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/czEGwcZSYyo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Part 8: Problem - returning same data from multiple places</title>
      <link>https://nr072.github.io/blog/posts/projects/mantle/8-problem-returning-same-data-from-multiple-places/</link>
      <pubDate>Thu, 03 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nr072.github.io/blog/posts/projects/mantle/8-problem-returning-same-data-from-multiple-places/</guid>
      <description>&lt;p&gt;The task card shows a list of related tasks when a note is clicked (&amp;ldquo;opened&amp;rdquo;). If a task data is modified when it&amp;rsquo;s shown on the task card, it updates in real-time. Here I ran into an issue.&lt;/p&gt;
&lt;p&gt;Every time a task data is modified, a Laravel event broadcasts the entire list of tasks to Echo, for updating the task list. Since the returned array directly replaces Vue&amp;rsquo;s reactive &lt;code&gt;tasks&lt;/code&gt; array, it needs to be in the same format as the original array. Which means the same code needs to return data in both cases: for the original array that a controller function returns on page load, and for the array the Laravel event returns every time there&amp;rsquo;s a modification.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;$tasks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Task&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;orderByRaw&lt;/span&gt;(
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;is_done, due_time is null,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        due_time,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        created_at desc&amp;#39;&lt;/span&gt;
    )
    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;(
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;due_time as dueTimeUtc&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;is_done as isDone&amp;#39;&lt;/span&gt;
    )
    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;limit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
    &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Even though the code to get data for the task list is relatively simple, keeping the same code in multiple places makes it very hard to change anything later. Every time there&amp;rsquo;s a change in the array structure, the change will have to made in all the places. This not only is redundant but also causes error that are hard to catch. Just forgetting to make changes in one place can have you looking into half the project files.&lt;/p&gt;
&lt;p&gt;Imagine what happens with complex code.&lt;/p&gt;
&lt;p&gt;So, there must be a way to use the same code from multiple places.&lt;/p&gt;
&lt;h2 id=&#34;a-few-possible-ways&#34;&gt;A few possible ways&lt;/h2&gt;
&lt;p&gt;With some help from my limited knowledge of Laravel, I instantly thought these ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Making an &lt;code&gt;app()-&amp;gt;call()&lt;/code&gt; call inside the event.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Passing &lt;code&gt;$tasks&lt;/code&gt; to the event in the &lt;code&gt;::dispatch()&lt;/code&gt; call.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using a global helper to get &lt;code&gt;$tasks&lt;/code&gt; from both places.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using a model method to get &lt;code&gt;$tasks&lt;/code&gt; from both places.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;1-app-call-inside-event&#34;&gt;#1 &lt;code&gt;app()-&amp;gt;call()&lt;/code&gt; inside event&lt;/h3&gt;
&lt;p&gt;This is a pretty straightforward way. The controller&amp;rsquo;s &lt;code&gt;index()&lt;/code&gt; method will stay as is, and it&amp;rsquo;ll be called from inside the event. This way, the single source of data still is the controller method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TaskUpdated&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ShouldBroadcast&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dispatchable&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;InteractsWithSockets&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;SerializesModels&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; $tasks;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; __construct()
    {
        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tasks&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;App\Http\Controllers\TaskController@index&amp;#39;&lt;/span&gt;);
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-parameter-of-dispatch&#34;&gt;#2 Parameter of &lt;code&gt;::dispatch()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In this case, whichever controller method is supposed to fire the event calls the controller&amp;rsquo;s &lt;code&gt;index()&lt;/code&gt; method itself to obtain task data. And then it passes that data to the event.&lt;/p&gt;
&lt;p&gt;For example, when a task&amp;rsquo;s data is modified, the &lt;code&gt;update()&lt;/code&gt; method itself will get the array of tasks form &lt;code&gt;index()&lt;/code&gt; and then simply pass it to &lt;code&gt;TaskUpdated::dispatch()&lt;/code&gt; as a parameter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;()
{
    &lt;span style=&#34;color:#75715e&#34;&gt;// Returns an array of tasks
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Task&lt;/span&gt; $task)
{
    &lt;span style=&#34;color:#75715e&#34;&gt;// Code for updating the task
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    $tasks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;();
    &lt;span style=&#34;color:#a6e22e&#34;&gt;TaskUpdated&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dispatch&lt;/span&gt;( $tasks );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; __construct($tasks)
{
    $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tasks&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $tasks;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-global-helper-function&#34;&gt;#3 Global helper function&lt;/h3&gt;
&lt;p&gt;Here, we move the source of data from &lt;code&gt;index()&lt;/code&gt; to a global helper function, and then call the helper from both &lt;code&gt;index()&lt;/code&gt; and the event.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tasksForTaskList&lt;/span&gt;();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; __construct()
{
    $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tasks&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tasksForTaskList&lt;/span&gt;();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4-model-method&#34;&gt;#4 Model method&lt;/h3&gt;
&lt;p&gt;Almost the same as a global helper except it&amp;rsquo;s a model method.&lt;/p&gt;
&lt;h2 id=&#34;so-which-one&#34;&gt;So, which one?&lt;/h2&gt;
&lt;p&gt;The 4th way was instantly out of the question. Getting data on a specific number of tasks formatted in a specific way seemed too case-dependent for a &lt;em&gt;model&lt;/em&gt; method. In fact, I didn&amp;rsquo;t even test if it worked. And later I realized I probably misunderstood how models work.&lt;/p&gt;
&lt;p&gt;Using a global helper also didn&amp;rsquo;t seem right. It seemed unnecessary, and it removed a very important part from the controller and put it in an almost random place.&lt;/p&gt;
&lt;p&gt;The other two ways seemed plausible, but it&amp;rsquo;d probably depend on conventions or good practices as to which should be used. (Personally, I was leaning toward way #2.)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Check out Mantle on GitHub &lt;a href=&#34;https://github.com/nr072/mantle&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;here&lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Part 7: Theme switching?</title>
      <link>https://nr072.github.io/blog/posts/projects/mantle/7-theme-switching/</link>
      <pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nr072.github.io/blog/posts/projects/mantle/7-theme-switching/</guid>
      <description>&lt;p&gt;The UI is too white. A good app should have a theme switching feature. A high contrast theme is necessary for accessibility.&lt;/p&gt;
&lt;p&gt;Though I only want the dark theme now.&lt;/p&gt;
&lt;p&gt;There are a few ways to implement theme switching. I like CSS approaches because they&amp;rsquo;re usually simpler. But since we&amp;rsquo;re using Vue, I want to make use of it.&lt;/p&gt;
&lt;h2 id=&#34;using-vue&#34;&gt;Using Vue&lt;/h2&gt;
&lt;p&gt;The current UI can be considered as the light theme. For the dark theme, we basically need a dark background and white text.&lt;/p&gt;
&lt;p&gt;Actually, we&amp;rsquo;ll need several dark backgrounds. At least two in the current situation: one for the page background and one for the cards. Thanks to Bulma, this can be done easily by replacing CSS classes in a few places.&lt;/p&gt;
&lt;p&gt;The (kind of) &amp;ldquo;before&amp;rdquo; and &amp;ldquo;after&amp;rdquo; of the HTML:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;has-background-white-ter&amp;#34;&lt;/span&gt;&amp;gt;
    ...
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;card has-background-white-bis&amp;#34;&lt;/span&gt;&amp;gt;
        ...
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
    ...
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;has-background-dark&amp;#34;&lt;/span&gt;&amp;gt;
    ...
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;card has-background-grey-dark has-text-light&amp;#34;&lt;/span&gt;&amp;gt;
        ...
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;card-header-title has-text-light&amp;#34;&lt;/span&gt;&amp;gt;
            ...
        &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
        ...
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
    ...
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The buttons and input fields can be easily changed since Bulma classes were used.&lt;/p&gt;
&lt;p&gt;So, we have a handful of classes for each theme. Now all we need is something that can set the class names based on the value of a certain variable.&lt;/p&gt;
&lt;p&gt;Inside &lt;code&gt;App.vue&lt;/code&gt;, we can add an &lt;code&gt;isDarkTheme&lt;/code&gt; property that will have &lt;code&gt;false&lt;/code&gt; as the default value. Then the classes can be added based on its value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;card&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;has-background-&amp;#39; + (isDarkTheme ? &amp;#39;white-bis&amp;#39; : &amp;#39;grey-dark&amp;#39;)&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{ &amp;#39;has-text-light&amp;#39; : isDarkTheme }&amp;#34;&lt;/span&gt;
&amp;gt;
    ...
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;card-header-title&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{ &amp;#39;has-text-light&amp;#39; : isDarkTheme }&amp;#34;&lt;/span&gt;&amp;gt;
        ...
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
    ...
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should&amp;rsquo;ve noticed a problem already. The &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag is out of reach of the &lt;code&gt;App&lt;/code&gt; component.&lt;/p&gt;
&lt;p&gt;We can solve that by removing the background color from &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; and adding it to the element immediately inside the &lt;code&gt;App&lt;/code&gt; component&amp;rsquo;s template. Some other CSS modifications will be necessary.&lt;/p&gt;
&lt;p&gt;Now if we add a checkbox connected to &lt;code&gt;isDarkTheme&lt;/code&gt; with a &lt;code&gt;v-model&lt;/code&gt; attribute, themes can be easily switched by simply checking and unchecking it.&lt;/p&gt;
&lt;p&gt;Except not inside child components.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;isDarkTheme&lt;/code&gt; is a property of &lt;code&gt;App&lt;/code&gt; and doesn&amp;rsquo;t automatically get passed to child components. So, they have no way of knowing when the checkbox is checked or unchecked. This can be solved by passing &lt;code&gt;isDarkTheme&lt;/code&gt; as a prop to all child components, and they&amp;rsquo;ll pass it to all their child components and so on until the end of the world.&lt;/p&gt;
&lt;p&gt;Seems a lot of work.&lt;/p&gt;
&lt;p&gt;(I know there are lots of theme switching methods crowding the street out there. But I want to try to solve the problem myself and see what I come up with, what problems I face, etc.)&lt;/p&gt;
&lt;h2 id=&#34;back-to-css&#34;&gt;Back to CSS&lt;/h2&gt;
&lt;p&gt;The CSS way I&amp;rsquo;ve been using is rather plain. And it limits the HTML structure a bit.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s done using a checkbox and the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/Adjacent_sibling_combinator&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;CSS adjacent sibling combinator&lt;/a&gt;
 to switch styles. We add a checkbox before the superdupercontainer that contains everything of the webpage. Then, when the checkbox is checked, a certain type of style is applied to the descendants of the container; and when it&amp;rsquo;s unchecked, a different type of style is applied to the descendants.&lt;/p&gt;
&lt;p&gt;In Mantle&amp;rsquo;s case, it&amp;rsquo;d look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;

    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;checkbox&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;theme-switcher&amp;#34;&lt;/span&gt;&amp;gt;

    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;&amp;gt;
        ...
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;

&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;card&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;background-color&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;white&lt;/span&gt;;
}

#theme-switcher&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;checked&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; #app .&lt;span style=&#34;color:#a6e22e&#34;&gt;card&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;background-color&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;black&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But this means lots of selectors must have &lt;code&gt;#theme-switcher[checked] + #app&lt;/code&gt; added in front of them, which looks bad.&lt;/p&gt;
&lt;p&gt;And, more importantly, we lose the ease of using Bulma&amp;rsquo;s classes. When using the JS approach, we were just changing the class names and everything would look nicely different. Here, we&amp;rsquo;ll have to manually write the CSS code. Then what&amp;rsquo;s the point of Bulma?&lt;/p&gt;
&lt;p&gt;So, this is a no-go.&lt;/p&gt;
&lt;h2 id=&#34;now-what&#34;&gt;Now what?&lt;/h2&gt;
&lt;p&gt;If we want to use Bulma, seems like we must use Vue. Can we bypass the eternal prop-passing somehow?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;To be pursued later&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;(I don&amp;rsquo;t want dark theme now anymore. All the colors I used were set thinking of light backgrounds. Every little badge is waging wars with the dark colors now. I need to pick some colors first, and that&amp;rsquo;s a job for another day.&lt;/p&gt;
&lt;p&gt;Goes to show why you should plan first (even a little).)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Check out Mantle on GitHub &lt;a href=&#34;https://github.com/nr072/mantle&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;here&lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Part 6: Not just badges, but &#34;NoT&#34; badges!</title>
      <link>https://nr072.github.io/blog/posts/projects/mantle/6-not-just-badges-but-not-badges/</link>
      <pubDate>Tue, 25 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nr072.github.io/blog/posts/projects/mantle/6-not-just-badges-but-not-badges/</guid>
      <description>&lt;h2 id=&#34;not-badges&#34;&gt;&amp;ldquo;NoT&amp;rdquo; badges&lt;/h2&gt;
&lt;p&gt;There are two card-like distinct sections on the UI now. For simplicity&amp;rsquo;s sake, let&amp;rsquo;s call them &amp;ldquo;cards&amp;rdquo; until the UI changes. The left one (top in mobile view) is the &amp;ldquo;task card&amp;rdquo;, and the right one is the &amp;ldquo;note card&amp;rdquo;. As their names suggest, the task card shows a list of tasks, and the note card shows a list of notes.&lt;/p&gt;
&lt;p&gt;On page load, the note card shows a list of available note names. (It currently shows all notes. Will need some logic for showing some specific notes only, for example, the last-modified 10 notes, or 5 &amp;ldquo;pinned&amp;rdquo; ones and the last-modified 5. But I haven&amp;rsquo;t decided on that yet.) The task card shows nothing except a button for creating new tasks on page load. If a note name on the note card is clicked, the tasks that belong to that note are shown on the task card. Pretty straight-forward, intuitive UI.&lt;/p&gt;
&lt;p&gt;Beside each note name on the note card, a number may be shown in the form of a badge. This is, currently, the number of &amp;ldquo;pending&amp;rdquo; tasks for that note. I&amp;rsquo;m calling these badges &amp;ldquo;Not&amp;rdquo; badge. &amp;ldquo;NoT&amp;rdquo; here is a dumb acronym for &amp;ldquo;number of tasks&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;It might have been a lot better to call them &amp;ldquo;pending badges&amp;rdquo;, but I&amp;rsquo;m planning to show the number of &amp;ldquo;done&amp;rdquo; tasks too there. This will be due to personal preferences, since I don&amp;rsquo;t think many people would want both numbers there. Seems like Mantle will need a &amp;ldquo;preferences&amp;rdquo; feature to show/hide &amp;ldquo;done&amp;rdquo; badges.&lt;/p&gt;
&lt;h2 id=&#34;updating-not-badges&#34;&gt;Updating &amp;ldquo;NoT&amp;rdquo; badges&lt;/h2&gt;
&lt;p&gt;These badges need to update in real-time as the user marks tasks as &amp;ldquo;done&amp;rdquo; or &amp;ldquo;pending&amp;rdquo;. There are a few ways to do that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Updating data directly in the Vue instance after the request to the API (for updating a task&amp;rsquo;s status) has succeeded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sending a &amp;ldquo;GET&amp;rdquo; request for fetching notes after the request to the API has succeeded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using WebSockets and Laravel&amp;rsquo;s event broadcasting.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The choice might seem obvious, seeing how we&amp;rsquo;re using Echo already. But only because we&amp;rsquo;re using one thing doesn&amp;rsquo;t mean we can&amp;rsquo;t use anything else. The best way to do something is to use whatever tools do it best.&lt;/p&gt;
&lt;h3 id=&#34;1-directly-updating-the-relevant-note-in-vue&#34;&gt;#1 Directly updating the relevant note in Vue&lt;/h3&gt;
&lt;p&gt;Way #1 depends on whether the request to the API succeeded or not. We&amp;rsquo;d need to check the response status and do the update in Vue data only if a success status was returned.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;axios&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;)
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; =&amp;gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;) {
            &lt;span style=&#34;color:#75715e&#34;&gt;// Somehow directly update in Vue
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
    })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Updating Vue data would need some lines of code. Because, if we only checked the status to make sure the request succeeded, we&amp;rsquo;d need to loop through Vue&amp;rsquo;s &lt;code&gt;notes&lt;/code&gt; array to find out which note&amp;rsquo;s task status changed. (Remember, to update a &amp;ldquo;NoT&amp;rdquo; badge, we need to modify Vue&amp;rsquo;s &lt;code&gt;notes&lt;/code&gt; array which is in the &lt;code&gt;NoteList&lt;/code&gt; Vue component, and the clicked task&amp;rsquo;s ID would come from the &lt;code&gt;TaskList&lt;/code&gt;component.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;$emit&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status-changed&amp;#39;&lt;/span&gt;, {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;noteId&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;numOfPendingTasks&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;numOfPendingTasks&lt;/span&gt;
    });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;updateNotes&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;updatedNoteData&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;notes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;note&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;notes&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;];
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;note&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;updatedNoteData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;) {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;note&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;numOfPendingTasks&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;updatedNoteData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;numOfPendingTasks&lt;/span&gt;;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-replacingupdating-the-entire-notes-array-in-vue&#34;&gt;#2 Replacing/updating the entire &lt;code&gt;notes&lt;/code&gt; array in Vue&lt;/h3&gt;
&lt;p&gt;Way #2 makes the second part of way #1 easier. Instead of finding which note should be updated, we get data for the entire note list and just replace it (like rebuilding a house instead of repairing a single room). This is easier than the first but the payload is much larger.&lt;/p&gt;
&lt;p&gt;By the way, this can be done without sending a separate &amp;ldquo;GET&amp;rdquo; request. The response would just have to return the array.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;$emit&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status-changed&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;notes&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;updateNotes&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;notes&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;notes&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;notes&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-using-websockets-and-event-broadcasting&#34;&gt;#3 Using WebSockets and event broadcasting&lt;/h3&gt;
&lt;p&gt;Way #3 is easier on the front-end side. The two things are independent here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sending a request to the API for updating a task&amp;rsquo;s status.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Listening for any update in notes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once we set up an Echo listener, it will update the &lt;code&gt;notes&lt;/code&gt; array whenever there&amp;rsquo;s an appropriate change on the back-end.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Echo&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;channel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;notes&amp;#39;&lt;/span&gt;)
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;NoteListNumsOfTasksUpdated&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;) =&amp;gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;notes&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;notes&lt;/span&gt;;
    });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we can just send requests to the API whenever we need.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;axios&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This way, the code for updating a task status can be separated from the code for updating &amp;ldquo;NoT&amp;rdquo; badges.&lt;/p&gt;
&lt;p&gt;If that doesn&amp;rsquo;t seem very impressive, well, WebSockets payloads are quite smaller.&lt;/p&gt;
&lt;p&gt;But there&amp;rsquo;s still work to do. We need to create events and listeners on the Laravel end. And that might make way #3 seem like a lot more work than the earlier ways, yet I chose it because WebSockets seemed better to me than the site getting bogged down due to many unfinished HTTP requests.&lt;/p&gt;
&lt;p&gt;And don&amp;rsquo;t forget, the payloads are smaller.&lt;/p&gt;
&lt;h2 id=&#34;event-listeners-for-updating-not-badges&#34;&gt;Event listeners for updating &amp;ldquo;NoT&amp;rdquo; badges&lt;/h2&gt;
&lt;p&gt;We already have a &lt;code&gt;TaskUpdated&lt;/code&gt; event. But it broadcasts data to update the &lt;em&gt;task list&lt;/em&gt;. We need to update the &lt;em&gt;note list&lt;/em&gt;. Can an event broadcast multiple sets of data on different channels? Maybe. &lt;code&gt;broadcastWith()&lt;/code&gt; returns an array, and &lt;code&gt;broadcastOn&lt;/code&gt; can return an array. Maybe the sequence of channel names and data matches up? Or maybe the entire data array is broadcast on all the specified channels.&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t dig deeper that way. Instead, (after reading up on listeners) it seemed it&amp;rsquo;d be cleaner if there was a listener just for updating &amp;ldquo;NoT&amp;rdquo; badges. But Echo listens to &lt;em&gt;events&lt;/em&gt;, not listeners. So, the listener would have to emit another event.&lt;/p&gt;
&lt;p&gt;This made sense. Rather than listening to a catch-all &amp;ldquo;TaskUpdated&amp;rdquo; event for both updating the task list and updating the note list, each should get a separate event.&lt;/p&gt;
&lt;p&gt;So, here&amp;rsquo;s how things turned out:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; Laravel          Laravel                                       Front-end
controller        listener                        Echo                |
   |                 |                              |                 |
   |                 |                              |                 |
   |&amp;lt;--------------------- Task status changes -----------------------|
   |                 |                              |                 |
   |  &amp;quot;TaskUpdated&amp;quot;  |                              |     Updates     |
   |----------------&amp;gt;|---- Data for task list -----&amp;gt;|----------------&amp;gt;|
   |     event       |                              |    task list    |
   |                 |                              |                 |
   |                 |                              |     Updates     |
   |                 |---- Data for note list -----&amp;gt;|----------------&amp;gt;|
   |                 |                              |  &amp;quot;NoT&amp;quot; badges   |
   |                 |                              |                 |
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is what I did at first. But the payload was too large since &lt;code&gt;NoteListNumsOfTasksUpdated&lt;/code&gt; was sending data for the entire note list. Plus, the event and the controller both had to be sending data in the same format, which made it difficult to maintain properly later.&lt;/p&gt;
&lt;p&gt;This was definitely not cleaner.&lt;/p&gt;
&lt;h2 id=&#34;event-listeners-for-updating-not-badges-but-better&#34;&gt;Event listeners for updating &amp;ldquo;NoT&amp;rdquo; badges, but better&lt;/h2&gt;
&lt;p&gt;Behold the &lt;code&gt;TaskStatusChanged&lt;/code&gt; event that broadcasts whatever data it is passed! And the listener passes it an object with only two properties: a note ID and the number of pending tasks for that note. So, the payload become much smaller.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; __construct($data, $channelName, $channelType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;public&amp;#39;&lt;/span&gt;) {
    $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;is_array&lt;/span&gt;($data) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; [] &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; $data;
    $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;channelName&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;$channelName    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; $channelName;
    $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;channelType&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;$channelType    &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; $channelType;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;broadcastOn&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;channelName&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ($this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;channelType&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;public&amp;#39;&lt;/span&gt;) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Channel&lt;/span&gt;( $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;channelName&lt;/span&gt; );
        }
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;broadcastWith&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The structure of &lt;code&gt;TaskStatusChanged&lt;/code&gt; has to be this way. Since the name is a generic one, it might get used for other purposes in future. So, instead of restricting the class now and change again later, it&amp;rsquo;s better to make it flexible from the start.&lt;/p&gt;
&lt;p&gt;Also, all the case-specific code is in the listener now. &lt;code&gt;UpdateNotBadge&lt;/code&gt; - a listener made for a specific purpose - now listens to &lt;code&gt;TaskUpdated&lt;/code&gt; - an event that may be fired by various causes - and broadcasts some specific data via an event. Echo will be able to identify different cases based on channel names.&lt;/p&gt;
&lt;p&gt;So, now, for any future change we need to make that&amp;rsquo;s related to updating &amp;ldquo;NoT&amp;rdquo; badges, we&amp;rsquo;ll only have to modify the &lt;code&gt;UpdateNotBadge&lt;/code&gt; listener which is not at all likely to be modified for some other purpose. And if we ever change the &amp;ldquo;NoT&amp;rdquo; badges system entirely, we&amp;rsquo;ll just remove the listener from &lt;code&gt;EventServiceProvider.php&lt;/code&gt; and then delete the &lt;code&gt;UpdateNotBadge.php&lt;/code&gt; file. &lt;code&gt;TaskStatusChanged&lt;/code&gt; will never even know about it.&lt;/p&gt;
&lt;p&gt;The problem of returning data in the same format from multiple places is solved here, though not because of anything WebSockets does. The only argument against returning a single note&amp;rsquo;s data could be that a loop is needed in Vue. But that&amp;rsquo;s a lot better than broadcasting data for all notes (a large payload) every time.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Echo&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;channel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;notes&amp;#39;&lt;/span&gt;)
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TaskStatusChanged&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;note&lt;/span&gt;) =&amp;gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;updateNotBadgeNumber&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;note&lt;/span&gt;);
    });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;updateNotBadgeNumber&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;updatedNote&lt;/span&gt;) {

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;notes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;note&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;notes&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;];

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;note&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;updatedNote&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;) { &lt;span style=&#34;color:#75715e&#34;&gt;// Matching note&amp;#39;s badge is updated
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;note&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;numOfPendingTasks&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;updatedNote&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;numOfPendingTasks&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
        }

    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Logic is separate inside a specific listener, payload is smaller, everyone is happy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a to-do list app (part 5)</title>
      <link>https://nr072.github.io/blog/posts/projects/mantle/building-a-todo-list-app-part-5/</link>
      <pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nr072.github.io/blog/posts/projects/mantle/building-a-todo-list-app-part-5/</guid>
      <description>&lt;h2 id=&#34;editors-constantly-watch-passed-task-data&#34;&gt;Editors constantly &amp;ldquo;watch&amp;rdquo; passed task data&lt;/h2&gt;
&lt;p&gt;Remember we faced this problem where task editors had no way of knowing if tasks updated and they kept showing old values even if tasks did update? We must have. At least I did.&lt;/p&gt;
&lt;p&gt;Well, there&amp;rsquo;s an easy way to fix that. By &amp;ldquo;watching&amp;rdquo; the task name and due time.&lt;/p&gt;
&lt;p&gt;So, task editors may or may not get passed those values. At the very beginning, the passed data is set to the properties in &lt;code&gt;data&lt;/code&gt;. After that, every time name and due time changes, the &lt;code&gt;data&lt;/code&gt; properties are reset again.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mounted&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;resetInputs&lt;/span&gt;();
},

&lt;span style=&#34;color:#a6e22e&#34;&gt;watch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;currentName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;resetInputs&lt;/span&gt;();
    },
    &lt;span style=&#34;color:#a6e22e&#34;&gt;currentDueTime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;resetInputs&lt;/span&gt;();
    }
},

&lt;span style=&#34;color:#a6e22e&#34;&gt;methods&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;resetInputs&lt;/span&gt;() {
        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Although the name is kind of misleading, &lt;code&gt;resetInputs()&lt;/code&gt; sets the property values to whatever data is passed (task editor) or to empty strings if no data is passed (task adder, or task editor but with no due time):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;resetInputs&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;newName&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;currentName&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;currentDueTime&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;newDate&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;paddedDateString&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;newTime&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;trimmedTimeString&lt;/span&gt;;
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;newDate&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;newTime&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And since the only way the data passed to a task editor can change is if there was a fresh fetch somewhere up in the hierarchy, the pre-fill values in the editor&amp;rsquo;s input fields are always the right values.&lt;/p&gt;
&lt;h2 id=&#34;notification-area&#34;&gt;Notification area&lt;/h2&gt;
&lt;p&gt;An app must show what is happening. Imagine clicking the &amp;ldquo;confirm&amp;rdquo; button and going away on your business, only to find out days later that your important email was not sent!&lt;/p&gt;
&lt;p&gt;So, we need a notification area. At the very least, the user needs to see a message when they&amp;rsquo;ve successfully done something (edited/removed a task or parts of it) or thought they&amp;rsquo;ve successfully done something but actually something went wrong.&lt;/p&gt;
&lt;p&gt;This needs rearranging the Vue components. Since the notification area can&amp;rsquo;t be a part of just the task list, what we&amp;rsquo;re looking for will look like this (this is just a representation, not the actual content of an HTML page):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;

    &amp;lt;notification-area&amp;gt;&amp;lt;/notification-area&amp;gt;

    &amp;lt;task-list&amp;gt;
        &amp;lt;task&amp;gt;
            ...
            &amp;lt;task-editor&amp;gt;&amp;lt;/task-editor&amp;gt;
        &amp;lt;/task&amp;gt;
        &amp;lt;task&amp;gt;
            ...
            &amp;lt;task-editor&amp;gt;&amp;lt;/task-editor&amp;gt;
        &amp;lt;/task&amp;gt;
        ...
    &amp;lt;/task-list&amp;gt;

    &amp;lt;task-adder&amp;gt;&amp;lt;/task-adder&amp;gt;

&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;TaskList&lt;/code&gt; can cause a notification because there may be a network error while fetching tasks. Task editors and the task adder can throw errors if the user provides invalid inputs, or show a success message if a task is edited or added successfully.&lt;/p&gt;
&lt;p&gt;That means we need to wrap them with another component like this (representation again):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;

    &amp;lt;app&amp;gt;
        &amp;lt;notification-area&amp;gt;&amp;lt;/notification-area&amp;gt;
        &amp;lt;task-list&amp;gt;&amp;lt;/task-list&amp;gt;
        &amp;lt;task-adder&amp;gt;&amp;lt;/task-adder&amp;gt;
    &amp;lt;/app&amp;gt;

&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, all child components can emit events when something good or bad happens, and &lt;code&gt;App&lt;/code&gt; will catch them and pass the message to the &lt;code&gt;NotificationArea&lt;/code&gt; component (or clear the existing notification when necessary).&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Check out Mantle on GitHub &lt;a href=&#34;https://github.com/nr072/mantle&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;here&lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a to-do list app (part 4)</title>
      <link>https://nr072.github.io/blog/posts/projects/mantle/building-a-todo-list-app-part-4/</link>
      <pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nr072.github.io/blog/posts/projects/mantle/building-a-todo-list-app-part-4/</guid>
      <description>&lt;h2 id=&#34;reusing-the-taskeditor-component&#34;&gt;Reusing the &lt;code&gt;TaskEditor&lt;/code&gt; component&lt;/h2&gt;
&lt;p&gt;The edit section for tasks and the section for adding a new tasks has lots of similarities. I decided to use the &lt;code&gt;TaskEditor&lt;/code&gt; component for both. The main difference, in terms of passing data, is that task adders don&amp;rsquo;t get existing task name or due time.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Data that may be passed&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;To task editor&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;To task adder&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Min of new due time range&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Yes&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Max of new due time range&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Yes&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Existing task name&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Yes&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Existing due time&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Yes&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;A &lt;a href=&#34;https://vuejs.org/v2/guide/components-edge-cases.html#Accessing-Child-Component-Instances-amp-Child-Elements&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;code&gt;ref&lt;/code&gt; attribute&lt;/a&gt;
 is needed in both to focus the input field when the adder/editor is revealed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;showEditSection&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEditing&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;$nextTick&lt;/span&gt;(() =&amp;gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;$refs&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;taskEditorComp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;$refs&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;newNameInput&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;focus&lt;/span&gt;();
    });
},
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;showAdderSection&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;isAddingTask&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;$nextTick&lt;/span&gt;(() =&amp;gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;$refs&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;taskAdderComp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;$refs&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;newNameInput&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;focus&lt;/span&gt;();
    });
},
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;websockets&#34;&gt;WebSockets&lt;/h2&gt;
&lt;p&gt;We have three main parties here: the Laravel server, the WebSockets server, and the front-end.&lt;/p&gt;
&lt;p&gt;So, this is how things work.&lt;/p&gt;
&lt;p&gt;The Laravel server is always running. In localhost, you run it manually with the &lt;code&gt;php artisan serve&lt;/code&gt; command. And a Laravel app is usually automatically served on (and by) a hosting. What more is needed is a WebSockets server which needs to be constantly running as well. You run that with the &lt;code&gt;php artisan websockets:serve&lt;/code&gt; command in the local environment. (&lt;a href=&#34;https://beyondco.de/docs/laravel-websockets/basic-usage/starting#keeping-the-socket-server-running-with-supervisord&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;It&amp;rsquo;s different&lt;/a&gt;
 for production.)&lt;/p&gt;
&lt;p&gt;Now, if the Laravel back-end wants to let the front-end know about something, it can inform the WebSockets server and &lt;em&gt;that&lt;/em&gt; can send data to the front-end.&lt;/p&gt;
&lt;p&gt;But the front-end must have some arrangement for &lt;em&gt;receiving&lt;/em&gt; the data. That&amp;rsquo;s where Echo comes in. You set up a listener with Echo that, well, listens to any message/data from the WebSockets server.&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s the gist of it, really.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a simplified representation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                            Front-end
Laravel server             WebSockets server                 Echo  |
      |                            |                          |    |
      |                            |     Starts connection    |    |
      |                            |&amp;lt;-------------------------|    |
      |                            |     &amp;amp; keeps listening    |    |
      |                            |                          |    |
      |&amp;lt;--- Makes some change -------------------------------------|
      |                            |                          |    |
      |--- Tells about change ----&amp;gt;|                          |    |
      |                            |                          |    |
      |                            |    Sends data without    |    |
      |                            |-------------------------&amp;gt;|    |
      |                            |   action from front-end  |    |
      |                            |                          |    |
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Of course, there are technical details in every step.&lt;/p&gt;
&lt;p&gt;For example, the Laravel server lets the WebSockets server know something happened by broadcasting &amp;ldquo;events&amp;rdquo;. In this case, it&amp;rsquo;s a &lt;code&gt;TaskUpdated&lt;/code&gt; event. Whenever some data of a task is updated, this event is fired from relevant functions in &lt;code&gt;TaskController.php&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, we create an event class using this Artisan command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;php artisan make:event TaskUpdated
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then add a line to broadcast an event at the necessary places inside &lt;code&gt;TaskController.php&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt; $request, &lt;span style=&#34;color:#a6e22e&#34;&gt;Task&lt;/span&gt; $task)
{
    &lt;span style=&#34;color:#75715e&#34;&gt;// Code for updating task
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;broadcast&lt;/span&gt;( &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TaskUpdated&lt;/span&gt;() );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Inside the &lt;code&gt;TaskUpdated.php&lt;/code&gt; file, we need to implement the &lt;code&gt;ShouldBroadcast&lt;/code&gt; interface, get tasks from the database and save them in a variable, and broadcast them to the front-end:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; $tasks;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; __construct() {
    $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tasks&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Task&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;all&lt;/span&gt;();
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;broadcastWith&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;allTasks&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tasks&lt;/span&gt; ];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Echo on the front-end needs to listen to this. But since there could be many such broadcasts about many different events, we need something to differentiate theme. So, &lt;code&gt;TaskUpdated.php&lt;/code&gt; will broadcast on a &amp;ldquo;channel&amp;rdquo; with a specific name which Echo will listen to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;broadcastOn&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Channel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;all-tasks&amp;#39;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;window.&lt;span style=&#34;color:#a6e22e&#34;&gt;Echo&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;channel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;all-tasks&amp;#39;&lt;/span&gt;)
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TaskUpdated&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;) =&amp;gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;tasks&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;allTasks&lt;/span&gt;;
    });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These were only some of the details though. Mantle shows tasks in a nicely ordered fashion, with &amp;ldquo;done&amp;rdquo; tasks shown after the &amp;ldquo;not done&amp;rdquo; ones and so on. Plus, an event is also broadcast when a task is removed or a new one is created.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Check out Mantle on GitHub &lt;a href=&#34;https://github.com/nr072/mantle&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;here&lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a to-do list app (part 3)</title>
      <link>https://nr072.github.io/blog/posts/projects/mantle/building-a-todo-list-app-part-3/</link>
      <pubDate>Sun, 09 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nr072.github.io/blog/posts/projects/mantle/building-a-todo-list-app-part-3/</guid>
      <description>&lt;h2 id=&#34;min-max-date-selection-range&#34;&gt;Min-max date selection range&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;input type=&amp;quot;date&amp;quot;&amp;gt;&lt;/code&gt; field allows the user to select any date within 1 year in the future. That may sound ridiculous, but let&amp;rsquo;s stick with it for now. (Anything later than a month should go to a calendar. But I may have plans to add a feature to categorize some tasks.)&lt;/p&gt;
&lt;p&gt;Regardless of how far the maximum date should be, the fact remains that there should be a maximum date and it should be the same for all tasks. Which means a single value should be passed to all instances of the &lt;code&gt;Task&lt;/code&gt; component.&lt;/p&gt;
&lt;p&gt;This didn&amp;rsquo;t occur to me at first. I used two (min and max) values each in every task.&lt;/p&gt;
&lt;p&gt;But I fixed it later. One minimum date and one maximum date were calculated in the &lt;code&gt;TaskList&lt;/code&gt; component and then passed to all tasks.&lt;/p&gt;
&lt;h2 id=&#34;mysql-datetime-and-js-date&#34;&gt;MySQL &lt;code&gt;datetime&lt;/code&gt; and JS &lt;code&gt;Date&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Since the MySQL &lt;a href=&#34;https://www.mysqltutorial.org/mysql-datetime&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;code&gt;datetime&lt;/code&gt; type&lt;/a&gt;
 accepts date(time)s in &lt;code&gt;yyyy-mm-dd hh:mm:ss&lt;/code&gt; format, it&amp;rsquo;s quite easy to pass it a date-time value from JS. All you have to do is use &lt;code&gt;.toISOString()&lt;/code&gt; on the JS &lt;code&gt;Date&lt;/code&gt; object and remove the &lt;code&gt;T&lt;/code&gt; from the first part.&lt;/p&gt;
&lt;p&gt;Merging the date and the time input to create the date-time value was the problem. I had to merge the date input and the time input into a string and get a JS &lt;code&gt;Date&lt;/code&gt; object to parse it to check it they were valid:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;updateTask&lt;/span&gt;() {

    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;newDate&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;newTime&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newDueTime&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Date(&lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newDueTime&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getTime&lt;/span&gt;()) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;// More stuff related to actually updating tasks
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This works. But seems like it could be cleaner.&lt;/p&gt;
&lt;p&gt;Timezones were a huge pain. It was all my fault though. I kept either counting the timezone twice or forgetting it. Things got especially confusing because I was passing the string I got from the database to &lt;code&gt;new Date()&lt;/code&gt; and then using &lt;code&gt;.toISOString()&lt;/code&gt; on it to format the date-time a bit nicely so that the date part and the time part are in the format I needed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v-model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;newDate&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;:min&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;newDateMinValue&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;:max&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;newDateMaxValue&amp;#34;&lt;/span&gt;
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Date()
    }
},

&lt;span style=&#34;color:#a6e22e&#34;&gt;computed&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {

    &lt;span style=&#34;color:#a6e22e&#34;&gt;newDateMinValue&lt;/span&gt;() {

        &lt;span style=&#34;color:#75715e&#34;&gt;// Using &amp;#34;.toISOString()&amp;#34; for formatting is bad!
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;now&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toISOString&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;T&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];

    },

    &lt;span style=&#34;color:#a6e22e&#34;&gt;newDateMaxValue&lt;/span&gt;() {

        &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nowPlus1Year&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Date(
            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;now&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getTime&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31536000000&lt;/span&gt;
        );

        &lt;span style=&#34;color:#75715e&#34;&gt;// Using &amp;#34;.toISOString()&amp;#34; for formatting is bad!
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nowPlus1Year&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toISOString&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;T&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];

    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All that chaos because I was doing formatting at the wrong place. I was changing the date-time value by using &lt;code&gt;.toISOString()&lt;/code&gt; just because &lt;code&gt;&amp;lt;input type=&amp;quot;date&amp;quot;&amp;gt;&lt;/code&gt; would only accept values in &lt;code&gt;yyyy-mm-dd&lt;/code&gt; format. That&amp;rsquo;s a good example of why presentation and logical layers should be kept separate.&lt;/p&gt;
&lt;p&gt;(Anyway, later I decided I probably should use two separate columns for date and time in the database. That way, time can be null too.)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Check out Mantle on GitHub &lt;a href=&#34;https://github.com/nr072/mantle&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;here&lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a to-do list app (part 2)</title>
      <link>https://nr072.github.io/blog/posts/projects/mantle/building-a-todo-list-app-part-2/</link>
      <pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nr072.github.io/blog/posts/projects/mantle/building-a-todo-list-app-part-2/</guid>
      <description>&lt;p&gt;Although the &amp;ldquo;tasks&amp;rdquo; table has more columns, the very basic functionalities will be concerned with task names and due times. The API will return a bunch of names and times, and Vue will show them on the web page.&lt;/p&gt;
&lt;p&gt;An important thing to note is that I put the call to the API to fetch tasks in the &lt;a href=&#34;https://vuejs.org/v2/api/#created&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;code&gt;created&lt;/code&gt; life-cycle hook&lt;/a&gt;
 this time. I used to do the initial API call in the &lt;a href=&#34;https://vuejs.org/v2/api/#mounted&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;code&gt;mounted&lt;/code&gt; hook&lt;/a&gt;
. The official Vue documentation does it too. The difference is small, but the &lt;code&gt;created&lt;/code&gt; hook is more logical for this, since fetching from the API doesn&amp;rsquo;t depend on whether the DOM can be changed or not.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;created&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fetchTasks&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;// Vue instance not mounted to DOM yet
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;},

&lt;span style=&#34;color:#a6e22e&#34;&gt;mounted&lt;/span&gt;() { &lt;span style=&#34;color:#75715e&#34;&gt;// Vue instance has been mounted to DOM
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fetchTasks&lt;/span&gt;();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;m using Axios because it was already included. No idea how different it is from JavaScript&amp;rsquo;s native &amp;ldquo;fetch&amp;rdquo; or in which scenarios one is better than the other.&lt;/p&gt;
&lt;p&gt;Since the API will return an array of tasks, a list of tasks can be made using &lt;code&gt;v-for&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v-for&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;task of tasks&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;:key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;task.id&amp;#34;&lt;/span&gt;&amp;gt;{{ task.name }}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a very rudimentary form. In our case, each task will be more complex than just some text inside an &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element. So, it&amp;rsquo;s better to use &lt;a href=&#34;https://vuejs.org/v2/guide/single-file-components.html&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;single-file components&lt;/a&gt;
 here.&lt;/p&gt;
&lt;p&gt;That means the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements can be replaced with a &lt;code&gt;&amp;lt;task&amp;gt;&lt;/code&gt; component, with each task passed to the component:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;task&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v-for&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;task of tasks&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;:key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;task.id&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;:task&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;task&amp;#34;&lt;/span&gt;
    &amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;task&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In turn, the &lt;code&gt;Task.vue&lt;/code&gt; file will have a &lt;code&gt;task&lt;/code&gt; &amp;ldquo;prop&amp;rdquo; of type &lt;code&gt;Object&lt;/code&gt;. The task name will be used as is, but a computed property will be used to show the time left (since &lt;code&gt;leftTime&lt;/code&gt; only needs to update if &lt;code&gt;dueTime&lt;/code&gt; changes):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;{{ task.name }}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v-if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;task.dueTime&amp;#34;&lt;/span&gt;&amp;gt;{{ leftTime }}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;computed&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;leftTime&lt;/span&gt;() {

        &lt;span style=&#34;color:#75715e&#34;&gt;// Still haven&amp;#39;t done the main part
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leftTime&lt;/span&gt;;

    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A &lt;code&gt;v-if&lt;/code&gt; check is used for left time because it&amp;rsquo;s not mandatory for a task to have a due time.&lt;/p&gt;
&lt;p&gt;To add some fields for editing the name and the due time is trickier though. We need three input fields: name, date, and time. (I think &lt;code&gt;&amp;lt;input type=&amp;quot;time&amp;quot;&amp;gt;&lt;/code&gt; has good support now. Need to check.) Plus two buttons to save and cancel. And another for removing the existing due time.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element is getting crowded now, because the task name and the &amp;ldquo;edit&amp;rdquo; button needs to show by default, and these should disappear and the edit fields and buttons should show when the &amp;ldquo;edit&amp;rdquo; button is clicked.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;

        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v-show&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!isEditing&amp;#34;&lt;/span&gt;&amp;gt;

            &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;{{ task.name }}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
            &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v-if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;task.dueTime&amp;#34;&lt;/span&gt;&amp;gt;{{ leftTime }}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;

            &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v-on:click&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;isEditing = true&amp;#34;&lt;/span&gt;&amp;gt;Edit&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt;&amp;gt;

        &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;&amp;gt;

        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v-show&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;isEditing&amp;#34;&lt;/span&gt;&amp;gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Input fields and buttons related to editing --&amp;gt;&lt;/span&gt;
        &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;&amp;gt;

    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;computed&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;dueTimeParts&lt;/span&gt;() {
        &lt;span style=&#34;color:#75715e&#34;&gt;// Returns an object with two properties: due time&amp;#39;s
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// date part and time part.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// (&amp;#34;Due time&amp;#34; sounds confusing now, I know.)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
},

&lt;span style=&#34;color:#a6e22e&#34;&gt;methods&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;showEditSection&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;newName&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;task&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;newDate&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dueTimeParts&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;date&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;newTime&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dueTimeParts&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEditing&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
    },

    &lt;span style=&#34;color:#a6e22e&#34;&gt;updateTask&lt;/span&gt;() {
        &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(Using &lt;code&gt;@&lt;/code&gt; instead of &lt;code&gt;v-on:&lt;/code&gt; would&amp;rsquo;ve been nice, but Hugo&amp;rsquo;s (or this theme&amp;rsquo;s, at least) syntax highlighter apparently doesn&amp;rsquo;t support Vue.)&lt;/p&gt;
&lt;p&gt;I used &lt;code&gt;v-show&lt;/code&gt; instead of &lt;code&gt;v-if&lt;/code&gt; to toggle the task name and the edit section because tasks may be edited frequently. (I do it, though that&amp;rsquo;s more because of the current UI than anything else.) So, &lt;a href=&#34;https://vuejs.org/v2/guide/conditional.html#v-if-vs-v-show&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;rendering at the beginning and toggling CSS &lt;code&gt;display&lt;/code&gt; later&lt;/a&gt;
 is fine with me here.&lt;/p&gt;
&lt;p&gt;Now, clicking the &amp;ldquo;edit&amp;rdquo; button will reveal the edit section, which has three inputs fields bound to three properties via &lt;code&gt;v-model&lt;/code&gt; attributes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v-show&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;isEditing&amp;#34;&lt;/span&gt;&amp;gt;

    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v-model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;newName&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v-model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;newDate&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v-model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;newTime&amp;#34;&lt;/span&gt;&amp;gt;

    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v-on:click&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;updateTask&amp;#34;&lt;/span&gt;&amp;gt;Save&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v-on:click&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;isEditing = false&amp;#34;&lt;/span&gt;&amp;gt;Cancel&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt;&amp;gt;

&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;newName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;newDate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;newTime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    }
},

&lt;span style=&#34;color:#a6e22e&#34;&gt;methods&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;updateTask&lt;/span&gt;() {

        &lt;span style=&#34;color:#75715e&#34;&gt;// `newName`, `newDate`, and `newTime` are sent to the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// back-end to update task.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// Edit section is hidden, and task name is revealed again.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEditing&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;

    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This works.&lt;/p&gt;
&lt;p&gt;But the next time the user clicks on the &amp;ldquo;edit&amp;rdquo; button again, the input fields will show old values, which is definitely not good. We need to clear the inputs after the update is done. In which case, we need to do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;methods&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;updateTask&lt;/span&gt;() {

        &lt;span style=&#34;color:#75715e&#34;&gt;// `newName`, `newDate`, and `newTime` are sent to the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// back-end to update task.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;// Edit section is hidden, and task name is revealed again.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;isEditing&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;clearInputs&lt;/span&gt;();

    },

    &lt;span style=&#34;color:#a6e22e&#34;&gt;clearInputs&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;newName&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;newName&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;newName&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Inputs also need to cleared when the user clicks &amp;ldquo;cancel&amp;rdquo;, in case they change their mind.&lt;/p&gt;
&lt;p&gt;Plus, the edit section needs to show existing values in the form of pre-filled input fields. (Nobody will type the entire task name when they just want to change a word.) Which means, when the &lt;code&gt;task&lt;/code&gt; prop is updated, the three input values must be updated too.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s starting to feel a bit redundant. We&amp;rsquo;re setting and resetting the three values too much. There should be a cleaner and easier way.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Check out Mantle on GitHub &lt;a href=&#34;https://github.com/nr072/mantle&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;here&lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a to-do list app (part 1)</title>
      <link>https://nr072.github.io/blog/posts/projects/mantle/building-a-todo-list-app-part-1/</link>
      <pubDate>Thu, 06 May 2021 06:00:00 +0600</pubDate>
      
      <guid>https://nr072.github.io/blog/posts/projects/mantle/building-a-todo-list-app-part-1/</guid>
      <description>&lt;p&gt;Since most of my previous works have been either too simple or too customized (for personal use), I&amp;rsquo;m starting this project with a wider audience in mind. The goal is to create an interactive to-do list app. Users will be able to see &amp;ldquo;tasks&amp;rdquo;, set times, and add, edit, and delete tasks and so on. You know the type.&lt;/p&gt;
&lt;p&gt;This is still simplistic and driven by personal needs. And it&amp;rsquo;s too common an idea. But it&amp;rsquo;s better to start with something easy than losing motivation halfway, before anything significant is done.&lt;/p&gt;
&lt;h1 id=&#34;technologies&#34;&gt;Technologies&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;m calling this app &amp;ldquo;Mantle&amp;rdquo;. It&amp;rsquo;ll be built with Laravel and Vue.&lt;/p&gt;
&lt;p&gt;The complete list, as of now, is this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/laravel/laravel&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Laravel&lt;/a&gt;
 (for the back-end API)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/vuejs/vue&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Vue.js&lt;/a&gt;
 (for data binding and manipulation on the front-end)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/beyondcode/laravel-websockets&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;laravel-websockets&lt;/a&gt;
 (for sending real-time updates to the front-end)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/laravel/echo&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Laravel Echo&lt;/a&gt;
 (for receiving the real-time data)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jgthms/bulma&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Bulma&lt;/a&gt;
 (CSS framework)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Laravel is there only for the API. I&amp;rsquo;ll probably never use more than a handful of routes. I&amp;rsquo;ll be using whatever comes by default with Laravel 8. Don&amp;rsquo;t think I&amp;rsquo;ll need the famous Debugbar even. The database will be MySQL.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll be using Vue 2. The &lt;a href=&#34;https://github.com/vuejs/vue-loader&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&amp;ldquo;vue-loader&amp;rdquo; package&lt;/a&gt;
 will be needed because of Single-File Components. But no &amp;ldquo;vue-router&amp;rdquo; or &amp;ldquo;vuex&amp;rdquo;. For now, Mantle will be done with just plain, old data binding.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;laravel-websockets&amp;rdquo; will be replacing Pusher. (It&amp;rsquo;s always seemed a little ridiculous to me to send data somewhere else to get it to the user. It&amp;rsquo;s like if you want to go from A to B, you need to go from A to C first and then from C to B. But things often seem obvious only in retrospect.)&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m new to using WebSockets. For those who don&amp;rsquo;t know what it does: It&amp;rsquo;s used to keep a permanent connection with the server open, as opposed to HTTP requests that can only be sent from the client. This is great, because until the client (a browser, for example) has sent a request to the server, it won&amp;rsquo;t know even if the server&amp;rsquo;s been blown up. So, in case of real-time update, for example, you&amp;rsquo;d have to send requests to the server either continuously or at a specific interval. Both of these have their own problems. But in a WebSockets connection, the server can send data to the client &lt;em&gt;on its own&lt;/em&gt;! The two most common uses of WebSockets probably are chatting apps and notifications.&lt;/p&gt;
&lt;p&gt;And while a WebSockets server can send data to the client, the client needs to receive it. Echo is a JS library that does just that. Echo listens to messages from the WebSockets server and receives the broadcast data.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m using Bulma just because I&amp;rsquo;ve never used it before and I don&amp;rsquo;t trust myself with Tailwind yet.&lt;/p&gt;
&lt;h1 id=&#34;features&#34;&gt;Features&lt;/h1&gt;
&lt;p&gt;Mantle&amp;rsquo;s features will be simple. A user will be able to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;see a list of &amp;ldquo;tasks&amp;rdquo;, along with their due times,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;edit task names,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;edit and remove due times,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add and remove tasks,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mark tasks as &amp;ldquo;done&amp;rdquo; or &amp;ldquo;not done&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Currently, for the UI, I&amp;rsquo;m thinking card-like containers showing tasks. There will be a hierarchy where tasks will be assinged to something from a higher tier, and they&amp;rsquo;ll be assigned to another upper tier in turn. Kind of like: board -&amp;gt; card -&amp;gt; task.&lt;/p&gt;
&lt;p&gt;Mantle&amp;rsquo;s UI will resemble Slack (or other similar apps) a lot. In fact, I&amp;rsquo;ll try not to make it an outright Slack clone. There will be similarities in features, but my personal preferences will have influence too.&lt;/p&gt;
&lt;p&gt;The due time feature is a good example of this. For some time now, I&amp;rsquo;ve been using a makeshift &amp;ldquo;task list&amp;rdquo;, using only JS for some of my daily errands. It was made just for that reason: to list the things I&amp;rsquo;m going to do over a day, and to set timers accordingly. So, I&amp;rsquo;d create a task and set a time, which would start ticking and show a timer in &amp;ldquo;hh-mm&amp;rdquo; format.&lt;/p&gt;
&lt;p&gt;That was the seed of Mantle, I think.&lt;/p&gt;
&lt;p&gt;Anyway, more features will be added slowly. Mantle will always look like a Slack clone, and it will always have features I personally like. My aim here is to practice building something for common use, with emphasis on &amp;ldquo;practice&amp;rdquo;.&lt;/p&gt;
&lt;h1 id=&#34;note&#34;&gt;Note&lt;/h1&gt;
&lt;p&gt;These posts won&amp;rsquo;t be regular. I&amp;rsquo;m writing these mainly to record my thought process during the development. I started Mantle without much planning and I intend to improvise all the way. Since writing things down often requires organizing your thoughts, these will help me look at the things I&amp;rsquo;ve done and maybe think ahead a bit too.&lt;/p&gt;
&lt;p&gt;The ulterior motive is to look back, some years later, at how I built things and what I thought while building them.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I won&amp;rsquo;t explain all the steps of building Mantle. So, don&amp;rsquo;t expect too much code and technical explanations. (There&amp;rsquo;s loads like that (and better) out there.) In fact, most code snippets I include are likely to be incomplete. And even the writing might not be all that coherent. (You&amp;rsquo;ll often think I forgot to write something in the middle.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But Mantle will be open-source, and all the code will be available &lt;a href=&#34;https://github.com/nr072/mantle&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;on GitHub&lt;/a&gt;
. So, feel free to check it out there.&lt;/p&gt;
&lt;p&gt;Suggestions are always welcome.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>